--This trigger will update the stock inventory as per orders.
USE WholesaleInventory;
GO
IF (OBJECT_ID('Stock_UPDATE') IS NOT NULL)
	DROP TRIGGER Stock_UPDATE

GO

CREATE TRIGGER Stock_UPDATE 
 ON ORDER_ITEMS 
AFTER INSERT
AS

BEGIN TRY
DECLARE @quantity INT;
DECLARE @product INT;
DECLARE @order INT;
DECLARE @status INT;

SELECT @quantity = QUANTITY FROM inserted;
SELECT @product  = STOCK_ID FROM inserted;
SELECT @order   =  ORDER_ID from inserted;

SELECT @status = SALE_OR_PURCHASE FROM ORDERS WHERE ORDER_ID = @order;

IF @status = 1 --Stock Sale
UPDATE STOCK SET STOCK_QUANTITY = STOCK_QUANTITY - @quantity WHERE STOCK_ID = @product;

IF @status = 2 --Stock Purchase
UPDATE STOCK SET STOCK_QUANTITY = STOCK_QUANTITY + @quantity WHERE STOCK_ID = @product;

END TRY
BEGIN CATCH
IF @@TRANCOUNT>0
ROLLBACK;
THROW;
END CATCH;

EXEC sp_helptrigger 'ORDER_ITEMS';


SELECT [STOCK_ID],[STOCK_NAME],[STOCK_QUANTITY],[PER_ITEM_PRICE],[UPDATED_ON]
  FROM [WholesaleInventory].[dbo].[STOCK] where STOCK_ID = 25;

INSERT INTO ORDER_ITEMS (ORDER_ITEM_ID, ORDER_ID, STOCK_ID, PER_ITEM_PRICE, QUANTITY, TOTAL_PRICE, UPDATED_ON) 
VALUES (3,	500,	25,	90,	1,	90,	GETDATE());


SELECT [ORDER_ITEM_ID],[ORDER_ID],[STOCK_ID],[PER_ITEM_PRICE],[QUANTITY],[TOTAL_PRICE],[UPDATED_ON]
  FROM [WholesaleInventory].[dbo].[ORDER_ITEMS] WHERE ORDER_ID = 500 and ORDER_ITEM_ID = 3;

SELECT [STOCK_ID],[STOCK_NAME],[STOCK_QUANTITY],[PER_ITEM_PRICE],[UPDATED_ON]
  FROM [WholesaleInventory].[dbo].[STOCK] where STOCK_ID = 25;








DELETe FROM ORDER_ITEMS where ORDER_ID = 500 and ORDER_ITEM_ID = 3;
